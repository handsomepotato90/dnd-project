{"version":3,"file":"static/js/996.559bd9c0.chunk.js","mappings":"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","sources":["components/MyEncounters/BattleScreen.js","webpack://dnd-project/./src/components/UI/Confirmation.module.css?e1ca","components/UI/ModalConfirmation.js","webpack://dnd-project/./src/components/UI/SuccesfulSubmission.module.css?1f84","components/UI/SuccessfulSubmission.js","components/UI/ModalSubmitSucces.js"],"sourcesContent":["import React, { useEffect, useState, useContext } from \"react\";\r\nimport styles from \"./BattleScreen.module.css\";\r\nimport { LoginContext } from \"../store/login-context\";\r\nimport MonsterBattleBox from \"./MonsterBattleBox\";\r\nimport { useHttpClient } from \"../hooks/http-hook\";\r\nimport LoadingSpinner from \"../UI/LoadingSpinner\";\r\nimport ModalSubmitSucces from \"../UI/ModalSubmitSucces\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport ModalError from \"../UI/ModalError\";\r\nimport ModalConfirmation from \"../UI/ModalConfirmation\";\r\nimport ConteinerBox from \"../UI/ConteinerBox\";\r\n\r\nexport default function BattleScreen() {\r\n  const auth = useContext(LoginContext);\r\n  const { isLoading, error, sendRequest, clearError } = useHttpClient();\r\n  const [deleted, setDeleted] = useState(false);\r\n  const [clickDelete, setDeleteClick] = useState(false);\r\n  const [all, setAll] = useState([]);\r\n  const url = window.location.href.split(\"battle_scr/\");\r\n  const navigate = useNavigate();\r\n  useEffect(() => {\r\n    const fetchMonsters = async () => {\r\n      try {\r\n        const resData = await sendRequest(\r\n          process.env.REACT_APP_BACKEND_URL + `/battle_scr/${url[1]}`\r\n        );\r\n        const control = [];\r\n        resData.monsters.forEach((element) => {\r\n          control.push(...element);\r\n        });\r\n        const allParticipents = [...control, ...resData.players];\r\n        for (let index = 0; index < allParticipents.length; index++) {\r\n          allParticipents[index].initiative = 0;\r\n        }\r\n        setAll([...allParticipents]);\r\n      } catch (err) {}\r\n    };\r\n    fetchMonsters();\r\n  }, [sendRequest]);\r\n\r\n  const deleteEncounter = () => {\r\n    setDeleteClick(true);\r\n  };\r\n\r\n  const startDelete = async (answer) => {\r\n    if (answer === true) {\r\n      try {\r\n        setDeleteClick(false);\r\n        await sendRequest(\r\n          process.env.REACT_APP_BACKEND_URL + `/battle_scr/${url[1]}`,\r\n          \"DELETE\",\r\n          null,\r\n          {\r\n            Authorization: \"Bearer \" + auth.token,\r\n            \"Content-Type\": \"application/json\",\r\n          }\r\n        );\r\n        setDeleted(true);\r\n      } catch (err) {}\r\n    } else {\r\n      setDeleteClick(false);\r\n    }\r\n  };\r\n\r\n  const removeModal = () => {\r\n    navigate(\"/\");\r\n  };\r\n\r\n  const errorHandler = () => {\r\n    clearError(null);\r\n  };\r\n  return (\r\n    <>\r\n      {clickDelete && (\r\n        <ModalConfirmation\r\n          title=\"Are you shure that you whant to delete this Encounter?\"\r\n          onClick={startDelete}\r\n        ></ModalConfirmation>\r\n      )}\r\n      {error && (\r\n        <ModalError\r\n          header=\"An Error Occurred\"\r\n          error={error}\r\n          onClick={errorHandler}\r\n        ></ModalError>\r\n      )}\r\n      {deleted && (\r\n        <ModalSubmitSucces\r\n          onClick={removeModal}\r\n          title=\"Encounter Deleted\"\r\n          text=\"Your encounter has been deleted successfully\"\r\n        />\r\n      )}\r\n      {isLoading && <LoadingSpinner asOverlay></LoadingSpinner>}\r\n      <ConteinerBox>\r\n        {all.map((stats, i) => (\r\n          <MonsterBattleBox\r\n            key={i}\r\n            stats={stats}\r\n            width=\"250px\"\r\n            height=\"250px\"\r\n            battleSideBar={true}\r\n          ></MonsterBattleBox>\r\n        ))}\r\n      </ConteinerBox>\r\n      <div className={styles.delete_btn__holder}>\r\n        <button\r\n          className={`${styles.delete_btn__style} button`}\r\n          onClick={deleteEncounter}\r\n        >\r\n          {\" \"}\r\n          Delete Encounter\r\n        </button>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n","// extracted by mini-css-extract-plugin\nexport default {\"btn\":\"Confirmation_btn__qOqTa\",\"modal_big_box__style\":\"Confirmation_modal_big_box__style__QrDVi\",\"confirm__style\":\"Confirmation_confirm__style__ZM4vu\",\"reject__style\":\"Confirmation_reject__style__Rdmy8\"};","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport BackDrop from \"./BackDrop\";\r\nimport styles from \"./Confirmation.module.css\";\r\n\r\nexport default function ModalConfirmation(props) {\r\n  const confirmation = (answer) => {\r\n    props.onClick(answer);\r\n  };\r\n  return (\r\n    <React.Fragment>\r\n      {ReactDOM.createPortal(\r\n        <BackDrop onClick={props.onClick}></BackDrop>,\r\n        document.getElementById(\"backdrop-root\")\r\n      )}\r\n      {ReactDOM.createPortal(\r\n        <div className={styles.modal_big_box__style}>\r\n          <span>{props.title}</span>\r\n          <div>\r\n            <button\r\n              className={`${styles.btn} ${styles.confirm__style}`}\r\n              onClick={() => confirmation(true)}\r\n            >\r\n              Yes\r\n            </button>\r\n            <button\r\n              className={`${styles.btn} ${styles.reject__style}`}\r\n              onClick={() => confirmation(false)}\r\n            >\r\n              No\r\n            </button>\r\n          </div>\r\n        </div>,\r\n        document.getElementById(\"overlay-root\")\r\n      )}\r\n    </React.Fragment>\r\n  );\r\n}\r\n","// extracted by mini-css-extract-plugin\nexport default {\"modal_big_box__style\":\"SuccesfulSubmission_modal_big_box__style__SRsom\",\"big_text__style\":\"SuccesfulSubmission_big_text__style__y9eZf\",\"text__style\":\"SuccesfulSubmission_text__style__puluz\",\"image__style\":\"SuccesfulSubmission_image__style__C7TpP\"};","import styles from \"./SuccesfulSubmission.module.css\";\r\nimport GreenMark from \"../../icons/green_check_mark.png\";\r\nexport default function SuccessfulSubmission(props) {\r\n  return (\r\n    <div onClick={() =>props.onClick(false)} className={styles.modal_big_box__style}>\r\n      <img className={styles.image__style} src={GreenMark} alt=\"check mark\"></img>\r\n      <span className={styles.big_text__style}>{props.title}</span>\r\n      <span className={styles.text__style}>\r\n       {props.text}\r\n      </span>\r\n    </div>\r\n  );\r\n}","import React from \"react\"\r\nimport ReactDOM from \"react-dom\"\r\nimport BackDrop from \"./BackDrop\"\r\nimport SuccessfulSubmission from \"./SuccessfulSubmission\"\r\n\r\n\r\nexport default function ModalSubmitSucces (props) {\r\n   return(\r\n       <React.Fragment>\r\n           {ReactDOM.createPortal(<BackDrop onClick={ props.onClick}></BackDrop>,document.getElementById(\"backdrop-root\"))}\r\n           {ReactDOM.createPortal(<SuccessfulSubmission onClick={props.onClick} monsterStats={props.monsterStats} title={props.title} text={props.text}></SuccessfulSubmission>,document.getElementById(\"overlay-root\"))}\r\n       </React.Fragment>\r\n   )\r\n}"],"names":["BattleScreen","auth","useContext","LoginContext","useHttpClient","isLoading","error","sendRequest","clearError","useState","deleted","setDeleted","clickDelete","setDeleteClick","all","setAll","url","window","location","href","split","navigate","useNavigate","useEffect","fetchMonsters","process","resData","control","monsters","forEach","element","push","allParticipents","players","index","length","initiative","startDelete","answer","Authorization","token","title","onClick","header","text","asOverlay","map","stats","i","width","height","battleSideBar","className","styles","ModalConfirmation","props","confirmation","ReactDOM","BackDrop","document","getElementById","SuccessfulSubmission","src","GreenMark","alt","ModalSubmitSucces","monsterStats"],"sourceRoot":""}