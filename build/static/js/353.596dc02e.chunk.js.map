{"version":3,"file":"static/js/353.596dc02e.chunk.js","mappings":"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","sources":["webpack://dnd-project/./src/components/MyProfile/MyUploads/MyUploads.module.css?bc7f","components/MyProfile/MyUploads/Edit.js","components/MyProfile/MyUploads/MyUploads.js","webpack://dnd-project/./src/components/UI/Confirmation.module.css?e1ca","components/UI/ModalConfirmation.js","webpack://dnd-project/./src/components/UI/SuccesfulSubmission.module.css?1f84","components/UI/SuccessfulSubmission.js","components/UI/ModalSubmitSucces.js","webpack://dnd-project/./src/components/Voting/MonsterName.module.css?4d6e","components/Voting/MonsterName.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"legend__style\":\"MyUploads_legend__style__xbb0v\",\"legend_single_box\":\"MyUploads_legend_single_box__oyblJ\",\"legend_main_box__style\":\"MyUploads_legend_main_box__style__VClZx\",\"edit_link__style\":\"MyUploads_edit_link__style__4Lx3s\",\"name_plate__style\":\"MyUploads_name_plate__style__GdigM\",\"name_plate\":\"MyUploads_name_plate__RXlLB\",\"edit_button__style\":\"MyUploads_edit_button__style__pAKvl\",\"delete_btn__style\":\"MyUploads_delete_btn__style__jol91\",\"btn_load_more\":\"MyUploads_btn_load_more__eXope\",\"search_bar__style\":\"MyUploads_search_bar__style__LBBQA\",\"voting_status__style\":\"MyUploads_voting_status__style__q+2RF\"};","import { Link } from \"react-router-dom\";\r\nimport styles from './MyUploads.module.css'\r\nexport default function Edit(props) {\r\n  return (\r\n    <Link className={`${styles.edit_link__style}`}\r\n    to={`/myProfile/MyUploads/Edit/${props.id}`}>\r\n      <button className={`${styles.edit_button__style} button`}>Edit</button>\r\n    </Link>\r\n  );\r\n}\r\n","import React, { useState, useEffect, useContext } from \"react\";\r\nimport { useHttpClient } from \"../../hooks/http-hook\";\r\nimport { LoginContext } from \"../../store/login-context\";\r\nimport LoadingSpinner from \"../../UI/LoadingSpinner\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport Edit from \"./Edit\";\r\nimport ModalConfirmation from \"../../UI/ModalConfirmation\";\r\nimport ModalSubmitSucces from \"../../UI/ModalSubmitSucces\";\r\nimport ModalError from \"../../UI/ModalError\";\r\nimport MonsterBattleBox from \"../../MyEncounters/MonsterBattleBox\";\r\nimport ConteinerBox from \"../../UI/ConteinerBox\";\r\n\r\nimport styles from \"./MyUploads.module.css\";\r\nimport MonsterName from \"../../Voting/MonsterName\";\r\n\r\nexport default function MyUploads() {\r\n  const { isLoading, error, sendRequest, clearError } = useHttpClient();\r\n  const login = useContext(LoginContext);\r\n  const [searchCondition, setSearchCondition] = useState(\"\");\r\n  const [myMonsters, setMyMonsters] = useState([]);\r\n  const [deleted, setDeleted] = useState(false);\r\n  const [clickDelete, setDeleteClick] = useState(false);\r\n  const [creatureToDelete, setCreatureToDelete] = useState(\"\");\r\n  const [limit, setLimit] = useState(20);\r\n  const navigate = useNavigate();\r\n  let timer;\r\n  const now = new Date().getTime();\r\n  useEffect(() => {\r\n    const fetchMonsters = async () => {\r\n      try {\r\n        const resData = await sendRequest(\r\n          process.env.REACT_APP_BACKEND_URL + \"/myProfile/MyUploads\",\r\n          \"POST\",\r\n          JSON.stringify({\r\n            user: login.userId,\r\n            limit: limit,\r\n            name: searchCondition,\r\n          }),\r\n          {\r\n            \"Content-Type\": \"application/json\",\r\n          }\r\n        );\r\n        setMyMonsters([...resData]);\r\n      } catch (err) {}\r\n    };\r\n    fetchMonsters();\r\n  }, [sendRequest, login.userId, limit, searchCondition]);\r\n\r\n  const nameSearch = (event) => {\r\n    if (timer) {\r\n      clearTimeout(timer);\r\n    }\r\n    timer = setTimeout(function () {\r\n      setSearchCondition(event.target.value);\r\n    }, 1000);\r\n  };\r\n\r\n  const errorHandler = () => {\r\n    clearError(null);\r\n  };\r\n  const deleteEncounter = (creatureId) => {\r\n    setDeleteClick(true);\r\n    setCreatureToDelete(creatureId);\r\n  };\r\n  const startDelete = async (answer) => {\r\n    if (answer === true) {\r\n      try {\r\n        setDeleteClick(false);\r\n        await sendRequest(\r\n          process.env.REACT_APP_BACKEND_URL +\r\n            `/MyProfile/MyUploads/${creatureToDelete}`,\r\n          \"DELETE\",\r\n          null,\r\n          { Authorization: \"Bearer \" + login.token }\r\n        );\r\n        setDeleted(true);\r\n      } catch (err) {}\r\n    } else {\r\n      setDeleteClick(false);\r\n    }\r\n  };\r\n  const removeModal = () => {\r\n    navigate(\"/\");\r\n  };\r\n  console.log(myMonsters);\r\n  return (\r\n    <>\r\n      {isLoading && <LoadingSpinner as0verlay></LoadingSpinner>}\r\n      {error && (\r\n        <ModalError\r\n          header=\"An Error Occurred\"\r\n          error={error}\r\n          onClick={errorHandler}\r\n        ></ModalError>\r\n      )}\r\n      {clickDelete && (\r\n        <ModalConfirmation\r\n          title=\"Are you shure you whant to delete this Creature?\"\r\n          onClick={startDelete}\r\n        ></ModalConfirmation>\r\n      )}\r\n      {deleted && (\r\n        <ModalSubmitSucces\r\n          onClick={removeModal}\r\n          title=\"Creature Deleted\"\r\n          text=\"Your creature has been deleted successfully\"\r\n        />\r\n      )}\r\n\r\n      <input\r\n        className={styles.search_bar__style}\r\n        onKeyUp={nameSearch}\r\n        placeholder=\"Search\"\r\n      ></input>\r\n      <ConteinerBox>\r\n        {myMonsters.map((monster, i) => (\r\n          <MonsterBattleBox\r\n            key={i}\r\n            childrenTopAndBottom={true}\r\n            battleSideBar={false}\r\n            stats={monster}\r\n            modalStats={true}\r\n            width=\"265px\"\r\n            height=\"250px\"\r\n          >\r\n            <div className={styles.name_plate__style}>\r\n              <MonsterName name={monster.name} />\r\n              <span\r\n                className={`${\r\n                  monster.timeforvoting > now\r\n                    ? \"grey\"\r\n                    : monster.votes.number > 0 ||\r\n                      monster.votes.number === undefined\r\n                    ? \"green\"\r\n                    : \"red\"\r\n                } \r\n                  ${styles.voting_status__style}`}\r\n              >\r\n                {monster.timeforvoting > now\r\n                  ? \"Ongoing\"\r\n                  : monster.votes.number > 0 ||\r\n                    monster.votes.number === undefined\r\n                  ? \"Accepted\"\r\n                  : \"Rejected\"}\r\n              </span>\r\n            </div>\r\n            <div>\r\n              <Edit id={monster._id}></Edit>\r\n              <button\r\n                className={`${styles.delete_btn__style} ${styles.edit_button__style} button`}\r\n                onClick={() => deleteEncounter(monster._id)}\r\n              >\r\n                {\" \"}\r\n                Delete\r\n              </button>\r\n            </div>\r\n          </MonsterBattleBox>\r\n        ))}\r\n      </ConteinerBox>\r\n    </>\r\n  );\r\n}\r\n","// extracted by mini-css-extract-plugin\nexport default {\"btn\":\"Confirmation_btn__qOqTa\",\"modal_big_box__style\":\"Confirmation_modal_big_box__style__QrDVi\",\"confirm__style\":\"Confirmation_confirm__style__ZM4vu\",\"reject__style\":\"Confirmation_reject__style__Rdmy8\"};","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport BackDrop from \"./BackDrop\";\r\nimport styles from \"./Confirmation.module.css\";\r\n\r\nexport default function ModalConfirmation(props) {\r\n  const confirmation = (answer) => {\r\n    props.onClick(answer);\r\n  };\r\n  return (\r\n    <React.Fragment>\r\n      {ReactDOM.createPortal(\r\n        <BackDrop onClick={props.onClick}></BackDrop>,\r\n        document.getElementById(\"backdrop-root\")\r\n      )}\r\n      {ReactDOM.createPortal(\r\n        <div className={styles.modal_big_box__style}>\r\n          <span>{props.title}</span>\r\n          <div>\r\n            <button\r\n              className={`${styles.btn} ${styles.confirm__style}`}\r\n              onClick={() => confirmation(true)}\r\n            >\r\n              Yes\r\n            </button>\r\n            <button\r\n              className={`${styles.btn} ${styles.reject__style}`}\r\n              onClick={() => confirmation(false)}\r\n            >\r\n              No\r\n            </button>\r\n          </div>\r\n        </div>,\r\n        document.getElementById(\"overlay-root\")\r\n      )}\r\n    </React.Fragment>\r\n  );\r\n}\r\n","// extracted by mini-css-extract-plugin\nexport default {\"modal_big_box__style\":\"SuccesfulSubmission_modal_big_box__style__SRsom\",\"big_text__style\":\"SuccesfulSubmission_big_text__style__y9eZf\",\"text__style\":\"SuccesfulSubmission_text__style__puluz\",\"image__style\":\"SuccesfulSubmission_image__style__C7TpP\"};","import styles from \"./SuccesfulSubmission.module.css\";\r\nimport GreenMark from \"../../icons/green_check_mark.png\";\r\nexport default function SuccessfulSubmission(props) {\r\n  return (\r\n    <div onClick={() =>props.onClick(false)} className={styles.modal_big_box__style}>\r\n      <img className={styles.image__style} src={GreenMark} alt=\"check mark\"></img>\r\n      <span className={styles.big_text__style}>{props.title}</span>\r\n      <span className={styles.text__style}>\r\n       {props.text}\r\n      </span>\r\n    </div>\r\n  );\r\n}","import React from \"react\"\r\nimport ReactDOM from \"react-dom\"\r\nimport BackDrop from \"./BackDrop\"\r\nimport SuccessfulSubmission from \"./SuccessfulSubmission\"\r\n\r\n\r\nexport default function ModalSubmitSucces (props) {\r\n   return(\r\n       <React.Fragment>\r\n           {ReactDOM.createPortal(<BackDrop onClick={ props.onClick}></BackDrop>,document.getElementById(\"backdrop-root\"))}\r\n           {ReactDOM.createPortal(<SuccessfulSubmission onClick={props.onClick} monsterStats={props.monsterStats} title={props.title} text={props.text}></SuccessfulSubmission>,document.getElementById(\"overlay-root\"))}\r\n       </React.Fragment>\r\n   )\r\n}","// extracted by mini-css-extract-plugin\nexport default {\"name_plate\":\"MonsterName_name_plate__-BGp6\"};","import styles from \"./MonsterName.module.css\";\r\n\r\nexport default function MonsterName(props) {\r\n  return (\r\n    <span className={`${styles.name_plate} overflowing`}>{props.name}</span>\r\n  );\r\n}\r\n"],"names":["Edit","props","className","styles","to","id","MyUploads","timer","useHttpClient","isLoading","error","sendRequest","clearError","login","useContext","LoginContext","useState","searchCondition","setSearchCondition","myMonsters","setMyMonsters","deleted","setDeleted","clickDelete","setDeleteClick","creatureToDelete","setCreatureToDelete","limit","navigate","useNavigate","now","Date","getTime","useEffect","fetchMonsters","process","JSON","stringify","user","userId","name","resData","startDelete","answer","Authorization","token","console","log","LoadingSpinner","as0verlay","ModalError","header","onClick","ModalConfirmation","title","ModalSubmitSucces","text","onKeyUp","event","clearTimeout","setTimeout","target","value","placeholder","ConteinerBox","map","monster","i","MonsterBattleBox","childrenTopAndBottom","battleSideBar","stats","modalStats","width","height","MonsterName","timeforvoting","votes","number","undefined","_id","creatureId","confirmation","ReactDOM","BackDrop","document","getElementById","SuccessfulSubmission","src","GreenMark","alt","monsterStats"],"sourceRoot":""}